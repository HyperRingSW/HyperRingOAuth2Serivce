name: Build and Deploy Go App

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Select environment to deploy to"
        required: true
        options:
          - test
          - production
        default: test

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact_name: ${{ steps.build.outputs.artifact_name }}

    steps:
      # 1) Check out code
      - name: Check out repository
        uses: actions/checkout@v4

      # 2) Install Go and build the application using `make build`
      - name: Install Go and build
        id: build
        run: |
          sudo apt-get update
          sudo apt-get install -y golang make
          
          # Build the Go application using `make build`
          make build
          
          # Make the binary executable
          chmod +x bin/server
          
          # Save the artifact name for the deploy job
          echo "artifact_name=bin/server" >> $GITHUB_OUTPUT

      # 3) Upload build artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: server
          path: bin/server

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      # 1) Download the build artifact
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: server
          path: bin/

      # 2) Configure environment variables
      - name: Configure environment variables
        run: |
          if [ "${{ github.event.inputs.environment }}" = "test" ]; then
            echo "EC2_HOST=${{ secrets.HOST_TEST }}" >> $GITHUB_ENV
            echo "SSH_KEY<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.SSH_PRIVATE_KEY_TEST }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "ENV_FILE_CONTENT<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.ENV_TEST }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "ENVIRONMENT_SELECTED=test" >> $GITHUB_ENV
            echo "DESTINATION_PATH=/home/ubuntu/hyper-auth-app" >> $GITHUB_ENV
          else
            echo "EC2_HOST=${{ secrets.HOST_PROD }}" >> $GITHUB_ENV
            echo "SSH_KEY<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.SSH_PRIVATE_KEY_PROD }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "ENV_FILE_CONTENT<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.ENV_PROD }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "ENVIRONMENT_SELECTED=production" >> $GITHUB_ENV
            echo "DESTINATION_PATH=/home/ubuntu/hyper-auth-app" >> $GITHUB_ENV
          fi

      # 3) Set up SSH
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          eval "$(ssh-agent -s)"
          echo "$SSH_KEY" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-add ~/.ssh/id_rsa
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true

      # 4) Test SSH connection
      - name: Test SSH connection
        run: |
          ssh -o StrictHostKeyChecking=no -v -i ~/.ssh/id_rsa ubuntu@"$EC2_HOST" "echo 'SSH connection successful'"

      # 5) Create local .env
      - name: Create .env file
        run: |
          echo "$ENV_FILE_CONTENT" > .env
          echo "Created .env for $ENVIRONMENT_SELECTED environment."

      # 6) Upload build artifacts and .env to the server
      - name: Upload build artifacts
        run: |
          sudo apt-get install -y rsync
          
          # Upload the Go binary and .env file to the appropriate EC2 host
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa" \
            bin/server .env \
            ubuntu@"$EC2_HOST":"$DESTINATION_PATH/"

      # 7) Set permissions on the server
      - name: Set permissions on the server
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@"$EC2_HOST" << 'EOF'
            cd "$DESTINATION_PATH"
            chmod +x ./server
            chmod 644 .env
            ls -l
          EOF

      # 8) Verify binary exists
      - name: Verify binary exists
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@"$EC2_HOST" << 'EOF'
            cd "$DESTINATION_PATH"
            if [ -f ./server ]; then
              echo "Binary exists at $(pwd)/server"
            else
              echo "Binary not found at $(pwd)/server"
            fi
          EOF

      # 9) Test binary execution
      - name: Test binary execution
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@"$EC2_HOST" << 'EOF'
            cd "$DESTINATION_PATH"
            ./server --version || echo "Binary execution failed"
          EOF

      # 10) Start service with PM2
      - name: Start service with PM2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@"$EC2_HOST" << 'EOF'
            pwd
            echo "$DESTINATION_PATH"
            cd /home/ubuntu/hyper-auth-app
            pm2 restart hyper-auth || pm2 start ./server --name hyper-auth
          EOF
