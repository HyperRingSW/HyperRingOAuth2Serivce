name: Deploy and build

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Select environment"
        required: true
        options:
          - test
          - production
        default: test

jobs:
  build_and_deploy:
    environment: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    
    steps:
      # 1) Check out code
      - name: Check out repository
        uses: actions/checkout@v3
      
      # 2) Determine environment variables
      - name: Configure environment variables
        run: |
          if [ "${{ github.event.inputs.environment }}" = "test" ]; then
            echo "EC2_HOST=${{ secrets.HOST_TEST }}" >> $GITHUB_ENV
            echo "SSH_KEY='${{ secrets.SSH_PRIVATE_KEY_TEST }}'" >> $GITHUB_ENV
            echo "ENV_FILE_CONTENT='${{ secrets.ENV_TEST }}'" >> $GITHUB_ENV
            echo "ENVIRONMENT_SELECTED=test" >> $GITHUB_ENV
          else
            echo "EC2_HOST=${{ secrets.HOST_PROD }}" >> $GITHUB_ENV
            echo "SSH_KEY='${{ secrets.SSH_PRIVATE_KEY_PROD }}'" >> $GITHUB_ENV
            echo "ENV_FILE_CONTENT='${{ secrets.ENV_PROD }}'" >> $GITHUB_ENV
            echo "ENVIRONMENT_SELECTED=production" >> $GITHUB_ENV
          fi

      # 3) Build Locally in GitHub Actions
      - name: Install dependencies and build
        run: |
          sudo apt-get update
          # If you need build tools
          sudo apt-get install -y build-essential make
          
          # Example if you're using Node.js:
          # npm ci
          # npm run build
          #
          # Or if your project uses a Makefile:
          make build
          
          # Now your compiled artifacts (e.g., in dist/) are ready in the runner's filesystem

      # 4) Set up SSH
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          eval "$(ssh-agent -s)"
          echo "$SSH_KEY" | tr -d '\r' | ssh-add -
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true

      # 5) Create local .env 
      - name: Create .env file
        run: |
          echo "$ENV_FILE_CONTENT" > .env
          echo "Created .env for $ENVIRONMENT_SELECTED environment."

      # 6) Upload only artifacts (and .env) to the server
      - name: Upload build artifacts
        run: |
          sudo apt-get install -y rsync
          
          # Example: If your build output is in dist/
          # We also send the .env file. Adjust as needed.
          rsync -avz -e "ssh -o StrictHostKeyChecking=no" \
            dist .env \
            ubuntu@"$EC2_HOST":/home/ubuntu/hyper-auth-app

      # 7) SSH into the server and restart PM2 (no building)
      - name: Restart PM2
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@"$EC2_HOST" << 'EOF'
            cd /home/ubuntu/hyper-auth-app
            pm2 restart hyper-auth || pm2 start dist/index.js --name hyper-auth
          EOF
