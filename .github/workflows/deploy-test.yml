name: Deploy and build

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: "Select environment to deploy"
        required: true
        options:
          - test
          - production
        default: test

jobs:
  deploy:
    # Tie the job's environment to the userâ€™s input
    # If "production" is chosen, it references the production environment (which can require manual approval).
    environment: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest

    steps:
      # 1) Check out your code
      - name: Check out repository
        uses: actions/checkout@v3

      # 2) Determine environment & set variables
      - name: Configure environment variables
        run: |
          echo "Configuring environment for ${{ github.event.inputs.environment }}..."

          if [ "${{ github.event.inputs.environment }}" = "test" ]; then
            echo "EC2_HOST=${{ secrets.HOST_TEST }}" >> $GITHUB_ENV
            echo "SSH_KEY='${{ secrets.SSH_PRIVATE_KEY_TEST }}'" >> $GITHUB_ENV
            echo "ENV_FILE_CONTENT='${{ secrets.ENV_TEST }}'" >> $GITHUB_ENV
            echo "ENVIRONMENT_SELECTED=test" >> $GITHUB_ENV
          else
            echo "EC2_HOST=${{ secrets.HOST_PROD }}" >> $GITHUB_ENV
            echo "SSH_KEY='${{ secrets.SSH_PRIVATE_KEY_PROD }}'" >> $GITHUB_ENV
            echo "ENV_FILE_CONTENT='${{ secrets.ENV_PROD }}'" >> $GITHUB_ENV
            echo "ENVIRONMENT_SELECTED=production" >> $GITHUB_ENV
          fi

      # 3) Set up SSH
      - name: Set up SSH
        run: |
          echo "Setting up SSH..."
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          eval "$(ssh-agent -s)"
          # Add the correct private key from $SSH_KEY
          echo "$SSH_KEY" | tr -d '\r' | ssh-add -

          echo "Adding host key to known_hosts for $EC2_HOST"
          ssh-keyscan -H "$EC2_HOST" >> ~/.ssh/known_hosts 2>/dev/null || true

      # 4) Create local .env
      - name: Create .env file
        run: |
          echo "$ENV_FILE_CONTENT" > .env
          echo "Created .env for $ENVIRONMENT_SELECTED environment."

      # 5) Upload code to EC2
      - name: Upload code to EC2
        run: |
          sudo apt-get update && sudo apt-get install -y rsync
          echo "Uploading to $EC2_HOST..."
          rsync -avz \
            -e "ssh -o StrictHostKeyChecking=no" \
            --exclude ".git/" \
            . ubuntu@"$EC2_HOST":/home/ubuntu/hyper-auth-app

      # 6) SSH into EC2, build, and restart PM2
      - name: Build & Restart PM2
        run: |
          echo "Building on $ENVIRONMENT_SELECTED environment..."
          ssh -o StrictHostKeyChecking=no ubuntu@"$EC2_HOST" << 'EOF'
            cd /home/ubuntu/hyper-auth-app
            # If needed, install Node dependencies, e.g.:
            # npm ci
            make build
            pm2 restart hyper-auth || pm2 start dist/index.js --name hyper-auth
          EOF
