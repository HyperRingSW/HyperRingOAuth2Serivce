openapi: 3.0.0
info:
  title: OAuth2 Server API
  version: "0.0.11"
  description: API for managing OAuth2 authentication and authorization.
servers:
  - url: http://localhost:8090

paths:
  /auth/google:
    post:
      summary: Authenticate user with a google provider
      description: |
        Authenticate users via Google.
      operationId: authenticateUserWithProvider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleAuthRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal server error
  /auth/apple:
    post:
      summary: Authenticate user with a apple provider
      description: |
        Authenticate users via Apple
      operationId: authenticateUserWithProvider
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppleAuthRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal server error

  /auth/token/refresh:
    post:
      summary: Token Refresh
      description: Refresh access token using refresh token
      operationId: RefreshTokenHandler
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'

  /auth/logout:
    post:
      summary: User Logout
      description: Logout user by invalidating access token
      operationId: LogoutHandler
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutSuccess'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'

  /user/profile:
    get:
      summary: Get User Profile
      description: Get user profile information
      operationId: GetUserProfile
      responses:
        '200':
          description: Successful profile retrieval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'

  /user/ring:
    post:
      summary: Attaching ring to user
      operationId: Ring
      requestBody:
        description: Attaching ring to user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ring'
      responses:
        '200':
          description: Successful profile update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'

    patch:
      summary: Update user ring name
      description: Updates the name of a ring assigned to a user.
      operationId: UpdateRingHandler
      security:
        - Bearer: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRingRequest'
      responses:
        '200':
          description: Ring name updated successfully
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: User ring not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'

    delete:
      summary: Detach ring from user
      operationId: Ring
      responses:
        '200':
          description: Successful profile update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileResponse'

components:
  schemas:
    GoogleAuthRequest:
      type: object
      properties:
        idToken:
          type: string
          description: ID token (Google and Apple)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        accessToken:
          type: string
          description: Access token (Facebook and Google)
          example: "EAAJZC..."
        refreshToken:
          type: string
          description: Refresh token (only Google)
          example: "1//0gF..."
    AppleAuthRequest:
      type: object
      properties:
        idToken:
          type: string
          description: ID token (Google and Apple)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        accessToken:
          type: string
          description: Access token (Facebook and Google)
          example: "EAAJZC..."
    LogoutSuccess:
      type: object
      properties:
        message:
          type: string
          example: "logged out"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6..."
        expiresAt:
          type: integer
          format: int64
          example: 1700000000

    UserProfileResponse:
      type: object
      properties:
        name:
          type: string
          example: "name"
        email:
          type: string
          example: "e@mail.com"
        rings:
          type: array
          items:
            $ref: '#/components/schemas/Ring'
    RingResponse:
      type: object
      properties:
        id:
          type: string
          example: "ring-001"
        name:
          type: string
          example: "ring name"
        userNamed:
          type: string
          example: "ring name"
        description:
          type: string
          example: "description"
        imageUrl:
          type: string
          format: uri
          example: "https://example.com/ring.png"
        siteUrl:
          type: string
          format: uri
          example: "https://example.com"
        services:
          type: array
          items:
            type: string
          example:
            - "install"
        deviceDescription:
          $ref: '#/components/schemas/DeviceDescriptionRequest'
    Ring:
      type: object
      properties:
        id:
          type: string
          example: "ring-001"
        name:
          type: string
          example: "ring name"
        userNamed:
          type: string
          example: "ring name"
        description:
          type: string
          example: "description"
        imageUrl:
          type: string
          format: uri
          example: "https://example.com/ring.png"
        siteUrl:
          type: string
          format: uri
          example: "https://example.com"
        services:
          type: array
          items:
            type: string
          example:
            - "install"
        deviceDescription:
          $ref: '#/components/schemas/DeviceDescriptionRequest'
    RingService:
      type: object
      required:
        - service
      properties:
        service:
          type: string
          example: "install"
    DeviceDescriptionRequest:
      type: object
      required:
        - cin
        - iin
        - name
        - batch
      properties:
        cin:
          type: string
          example: "CIN12345"
        iin:
          type: string
          example: "IIN67890"
        name:
          type: string
          example: "Ring name"
        description:
          type: string
          example: "description"
        imageUrl:
          type: string
          format: uri
          example: "https://example.com/device.png"
        siteUrl:
          type: string
          format: uri
          example: "https://example.com/device"
        batch:
          $ref: '#/components/schemas/RingBatchRequest'
    RingBatchRequest:
      type: object
      required:
        - batchId
        - isUser
        - isUserName
      properties:
        batchId:
          type: integer
          example: 1
        isUser:
          type: integer
          example: 1
        isUserName:
          type: string
          example: "user name"
    UpdateRingRequest:
      type: object
      required:
        - ringId
        - userNamed
      properties:
        ringId:
          type: string
          description: The unique identifier of the ring
          example: "ring-123"
        userNamed:
          type: string
          description: The new name for the ring
          example: "My Favorite Ring"
    HTTPError:
      type: object
      properties:
        error:
          type: string
          example: "Invalid request data"
      required:
        - error
  securitySchemes:
    Bearer:
      type: apiKey
      description: 'Value: Bearer {jwt}'
      name: Authorization
      in: header
security:
  - Bearer: [ ]