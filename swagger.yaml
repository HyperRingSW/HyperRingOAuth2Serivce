openapi: 3.0.0
info:
  title: OAuth2 Server API
  version: "1.0.0"
  description: API for managing OAuth2 authentication and authorization.
servers:
  - url: http://localhost:3000
paths:
  /auth/user:
    post:
      summary: Authenticate with providers (Google, Apple, Facebook)
      description: |
        This endpoint retrieves JWT and etc tokens
      operationId: authenticateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthsRequest'
      responses:
        '200':
          description: Successful registration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
          description: HTTP Error
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
  /auth/token/refresh:
    post:
      summary: Token Refresh
      description: Refresh access token using refresh token
      operationId: RefreshTokenHandler
      requestBody:
        description: Token refresh data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenServiceResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
  /auth/logout:
    post:
      summary: User Logout
      description: Logout user by invalidating access token
      operationId: LogoutHandler
      requestBody:
        description: Logout data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogoutRequest'
      responses:
        '200':
          description: Successful logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogoutSuccess'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
  /user/profile:
    get:
      summary: Get User Profile
      description: Get user profile information
      operationId: GetUserProfile
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: Successful profile retrieval
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
    patch:
      summary: Update User Profile
      description: Update user profile information
      operationId: UpdateUserProfile
      security:
        - BearerAuth: [ ]
      requestBody:
        description: Profile update data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfileRequest'
      responses:
        '200':
          description: Successful profile update
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    AuthsRequest:
      type: object
      properties:
        provider:
          type: string
          enum: [ google, apple, facebook ]
          description: Provider name
          example: google
        id_token:
          type: string
          description: ID token (Google and Apple)
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        access_token:
          type: string
          description: Access token (Facebook and Google)
          example: "EAAJZC..."
        refresh_token:
          type: string
          description: Refresh token (only Google)
          example: "1//0gF..."
    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
          example: "refresh_token_123"
        provider:
          type: string
          example: "google"
      required:
        - refresh_token
        - provider
    LogoutRequest:
      type: object
      properties:
        access_token:
          type: string
          example: "access_token_123"
      required:
        - access_token
    LogoutSuccess:
      type: object
      properties:
        message:
          type: string
          example: "logged out"
    AuthResponse:
      type: object
      properties:
        jwt_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6..."
        access_token:
          type: string
          example: "access_token_123"
        refresh_token:
          type: string
          example: "refresh_token_123"
        expires_at:
          type: integer
          format: int64
          example: 1700000000
    TokenServiceResponse:
      type: object
      properties:
        user_id:
          type: integer
          example: 1
        access_token:
          type: string
          example: "new_access_token_123"
        refresh_token:
          type: string
          example: "new_refresh_token_123"
        expiration_in:
          type: integer
          example: 3600
        expires_at:
          type: integer
          format: int64
          example: 1700000000
        data:
          type: string
          example: "additional data"
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
      required:
        - id
        - email
        - name
    UpdateUserProfileRequest:
      type: object
      properties:
        email:
          type: string
          example: "new_email@example.com"
        name:
          type: string
          example: "Jane Doe"
      required:
        - email
        - name
    HTTPError:
      type: object
      properties:
        error:
          type: string
          example: "Invalid request data"
      required:
        - error