// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	AccessToken          *string `json:"access_token,omitempty"`
	AccessTokenOriginal  *string `json:"access_token_original,omitempty"`
	ExpiresAt            *int64  `json:"expires_at,omitempty"`
	JwtToken             *string `json:"jwt_token,omitempty"`
	RefreshToken         *string `json:"refresh_token,omitempty"`
	RefreshTokenOriginal *string `json:"refresh_token_original,omitempty"`
}

// BackupResponse defines model for BackupResponse.
type BackupResponse struct {
	BackupId *string `json:"backup_id,omitempty"`
	Status   *string `json:"status,omitempty"`
}

// CallbackRequest defines model for CallbackRequest.
type CallbackRequest struct {
	Code         string `json:"code"`
	CodeVerifier string `json:"code_verifier"`
	Provider     string `json:"provider"`
	RedirectUri  string `json:"redirect_uri"`
}

// HTTPError defines model for HTTPError.
type HTTPError struct {
	Message string `json:"message"`
}

// LogoutRequest defines model for LogoutRequest.
type LogoutRequest struct {
	AccessToken string `json:"access_token"`
}

// LogoutSuccess defines model for LogoutSuccess.
type LogoutSuccess struct {
	Message *string `json:"message,omitempty"`
}

// RefreshTokenRequest defines model for RefreshTokenRequest.
type RefreshTokenRequest struct {
	Provider     string `json:"provider"`
	RefreshToken string `json:"refresh_token"`
}

// RestoreRequest defines model for RestoreRequest.
type RestoreRequest struct {
	BackupId string `json:"backup_id"`
}

// RestoreResponse defines model for RestoreResponse.
type RestoreResponse struct {
	RestoreId *string `json:"restore_id,omitempty"`
	Status    *string `json:"status,omitempty"`
}

// SignInRequest defines model for SignInRequest.
type SignInRequest struct {
	Code         string `json:"code"`
	CodeVerifier string `json:"code_verifier"`
	Provider     string `json:"provider"`
	RedirectUri  string `json:"redirect_uri"`
}

// SignUpRequest defines model for SignUpRequest.
type SignUpRequest struct {
	Code        string `json:"code"`
	Provider    string `json:"provider"`
	RedirectUri string `json:"redirect_uri"`
}

// TokenServiceResponse defines model for TokenServiceResponse.
type TokenServiceResponse struct {
	AccessToken  *string    `json:"access_token,omitempty"`
	Data         *string    `json:"data,omitempty"`
	ExpirationIn *int       `json:"expiration_in,omitempty"`
	ExpiresAt    *time.Time `json:"expires_at,omitempty"`
	RefreshToken *string    `json:"refresh_token,omitempty"`
	UserId       *int       `json:"user_id,omitempty"`
}

// UpdateUserProfileRequest defines model for UpdateUserProfileRequest.
type UpdateUserProfileRequest struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

// UserProfile defines model for UserProfile.
type UserProfile struct {
	Email string `json:"email"`
	Id    int    `json:"id"`
	Name  string `json:"name"`
}

// RedirectHandlerParams defines parameters for RedirectHandler.
type RedirectHandlerParams struct {
	// Provider Название провайдера
	Provider string `form:"provider" json:"provider"`

	// RedirectUri URI перенаправления
	RedirectUri string `form:"redirect_uri" json:"redirect_uri"`

	// CodeChallenge Код-верификатор для PKCE
	CodeChallenge *string `form:"code_challenge,omitempty" json:"code_challenge,omitempty"`
}

// CallbackHandlerJSONRequestBody defines body for CallbackHandler for application/json ContentType.
type CallbackHandlerJSONRequestBody = CallbackRequest

// LogoutHandlerJSONRequestBody defines body for LogoutHandler for application/json ContentType.
type LogoutHandlerJSONRequestBody = LogoutRequest

// SignInHandlerJSONRequestBody defines body for SignInHandler for application/json ContentType.
type SignInHandlerJSONRequestBody = SignInRequest

// SignUpHandlerJSONRequestBody defines body for SignUpHandler for application/json ContentType.
type SignUpHandlerJSONRequestBody = SignUpRequest

// RefreshTokenHandlerJSONRequestBody defines body for RefreshTokenHandler for application/json ContentType.
type RefreshTokenHandlerJSONRequestBody = RefreshTokenRequest

// UpdateUserProfileJSONRequestBody defines body for UpdateUserProfile for application/json ContentType.
type UpdateUserProfileJSONRequestBody = UpdateUserProfileRequest

// RestoreUserDataJSONRequestBody defines body for RestoreUserData for application/json ContentType.
type RestoreUserDataJSONRequestBody = RestoreRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Обработка колбэка от провайдера
	// (POST /auth/callback)
	CallbackHandler(w http.ResponseWriter, r *http.Request)
	// Выход из системы
	// (POST /auth/logout)
	LogoutHandler(w http.ResponseWriter, r *http.Request)
	// Перенаправление на страницу провайдера
	// (GET /auth/redirect)
	RedirectHandler(w http.ResponseWriter, r *http.Request, params RedirectHandlerParams)
	// Аутентификация пользователя
	// (POST /auth/signin)
	SignInHandler(w http.ResponseWriter, r *http.Request)
	// Регистрация нового пользователя
	// (POST /auth/signup)
	SignUpHandler(w http.ResponseWriter, r *http.Request)
	// Обновление токена
	// (POST /auth/token/refresh)
	RefreshTokenHandler(w http.ResponseWriter, r *http.Request)
	// Удаление аккаунта пользователя
	// (DELETE /user/account)
	DeleteUserAccount(w http.ResponseWriter, r *http.Request)
	// Резервное копирование данных пользователя
	// (GET /user/backup)
	BackupUserData(w http.ResponseWriter, r *http.Request)
	// Получение профиля пользователя
	// (GET /user/profile)
	GetUserProfile(w http.ResponseWriter, r *http.Request)
	// Обновление профиля пользователя
	// (PATCH /user/profile)
	UpdateUserProfile(w http.ResponseWriter, r *http.Request)
	// Восстановление данных пользователя
	// (POST /user/restore)
	RestoreUserData(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Обработка колбэка от провайдера
// (POST /auth/callback)
func (_ Unimplemented) CallbackHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Выход из системы
// (POST /auth/logout)
func (_ Unimplemented) LogoutHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Перенаправление на страницу провайдера
// (GET /auth/redirect)
func (_ Unimplemented) RedirectHandler(w http.ResponseWriter, r *http.Request, params RedirectHandlerParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Аутентификация пользователя
// (POST /auth/signin)
func (_ Unimplemented) SignInHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Регистрация нового пользователя
// (POST /auth/signup)
func (_ Unimplemented) SignUpHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Обновление токена
// (POST /auth/token/refresh)
func (_ Unimplemented) RefreshTokenHandler(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Удаление аккаунта пользователя
// (DELETE /user/account)
func (_ Unimplemented) DeleteUserAccount(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Резервное копирование данных пользователя
// (GET /user/backup)
func (_ Unimplemented) BackupUserData(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получение профиля пользователя
// (GET /user/profile)
func (_ Unimplemented) GetUserProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Обновление профиля пользователя
// (PATCH /user/profile)
func (_ Unimplemented) UpdateUserProfile(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Восстановление данных пользователя
// (POST /user/restore)
func (_ Unimplemented) RestoreUserData(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CallbackHandler operation middleware
func (siw *ServerInterfaceWrapper) CallbackHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CallbackHandler(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LogoutHandler operation middleware
func (siw *ServerInterfaceWrapper) LogoutHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogoutHandler(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RedirectHandler operation middleware
func (siw *ServerInterfaceWrapper) RedirectHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params RedirectHandlerParams

	// ------------- Required query parameter "provider" -------------

	if paramValue := r.URL.Query().Get("provider"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "provider"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "provider", r.URL.Query(), &params.Provider)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "provider", Err: err})
		return
	}

	// ------------- Required query parameter "redirect_uri" -------------

	if paramValue := r.URL.Query().Get("redirect_uri"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "redirect_uri"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "redirect_uri", r.URL.Query(), &params.RedirectUri)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "redirect_uri", Err: err})
		return
	}

	// ------------- Optional query parameter "code_challenge" -------------

	err = runtime.BindQueryParameter("form", true, false, "code_challenge", r.URL.Query(), &params.CodeChallenge)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "code_challenge", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RedirectHandler(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SignInHandler operation middleware
func (siw *ServerInterfaceWrapper) SignInHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SignInHandler(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// SignUpHandler operation middleware
func (siw *ServerInterfaceWrapper) SignUpHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SignUpHandler(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RefreshTokenHandler operation middleware
func (siw *ServerInterfaceWrapper) RefreshTokenHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshTokenHandler(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUserAccount operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserAccount(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserAccount(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// BackupUserData operation middleware
func (siw *ServerInterfaceWrapper) BackupUserData(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.BackupUserData(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserProfile operation middleware
func (siw *ServerInterfaceWrapper) GetUserProfile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserProfile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUserProfile operation middleware
func (siw *ServerInterfaceWrapper) UpdateUserProfile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUserProfile(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RestoreUserData operation middleware
func (siw *ServerInterfaceWrapper) RestoreUserData(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RestoreUserData(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/callback", wrapper.CallbackHandler)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/logout", wrapper.LogoutHandler)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/auth/redirect", wrapper.RedirectHandler)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/signin", wrapper.SignInHandler)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/signup", wrapper.SignUpHandler)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/token/refresh", wrapper.RefreshTokenHandler)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/account", wrapper.DeleteUserAccount)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/backup", wrapper.BackupUserData)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/profile", wrapper.GetUserProfile)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/user/profile", wrapper.UpdateUserProfile)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/restore", wrapper.RestoreUserData)
	})

	return r
}
